/*
Navicat MySQL Data Transfer

Source Server         : king
Source Server Version : 50724
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50724
File Encoding         : 65001

Date: 2022-04-10 12:52:36
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for ms_admin
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin`;
CREATE TABLE `ms_admin` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_admin
-- ----------------------------
INSERT INTO `ms_admin` VALUES ('1', 'admin', '$2a$10$Wcr8LB2XYF9ZKSfFV5G7zO1b9xIYsSin1q9TsbORn49Y/CZNPEtPK');
INSERT INTO `ms_admin` VALUES ('2', 'test', '$2a$10$Wcr8LB2XYF9ZKSfFV5G7zO1b9xIYsSin1q9TsbORn49Y/CZNPEtPK');

-- ----------------------------
-- Table structure for ms_admin_permission
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin_permission`;
CREATE TABLE `ms_admin_permission` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `admin_id` bigint(20) NOT NULL,
  `permission_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_admin_permission
-- ----------------------------
INSERT INTO `ms_admin_permission` VALUES ('1', '1', '1');
INSERT INTO `ms_admin_permission` VALUES ('2', '2', '1');

-- ----------------------------
-- Table structure for ms_article
-- ----------------------------
DROP TABLE IF EXISTS `ms_article`;
CREATE TABLE `ms_article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `comment_counts` int(11) DEFAULT NULL COMMENT '评论数量',
  `create_date` bigint(20) DEFAULT NULL COMMENT '创建时间',
  `summary` varchar(255) DEFAULT NULL COMMENT '简介',
  `title` varchar(64) DEFAULT NULL COMMENT '标题',
  `view_counts` int(11) DEFAULT NULL COMMENT '浏览数量',
  `weight` int(11) NOT NULL COMMENT '是否置顶',
  `author_id` bigint(20) DEFAULT NULL COMMENT '作者id',
  `body_id` bigint(20) DEFAULT NULL COMMENT '内容id',
  `category_id` int(11) DEFAULT NULL COMMENT '类别id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1512407854470885379 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_article
-- ----------------------------
INSERT INTO `ms_article` VALUES ('1', '0', '1649415101709', '记录一下', '博客开发日记1', '29', '0', '1', '1512382669214683141', '3');
INSERT INTO `ms_article` VALUES ('2', '0', '1648413645850', 'java数据结构', 'JAVA-数据结构-栈-附leetcode', '10', '0', '1', '1512376562991742979', '4');
INSERT INTO `ms_article` VALUES ('3', '0', '1648414212735', '数据结构数组', 'JAVA-数据结构-数组-附leetcode', '3', '0', '1512378108831784962', '1512378940637765633', '4');
INSERT INTO `ms_article` VALUES ('4', '0', '1647414721213', 'java数据机构链表笔记，附力扣习题', 'JAVA-数据结构-链表-附leetcode', '1', '0', '1', '1512381073357508609', '4');
INSERT INTO `ms_article` VALUES ('5', '0', '1647414772651', 'JAVA数据结构哈希表笔记和相关习题', 'JAVA-数据结构-哈希表-附leetcode', '4', '0', '1', '1512381289016037380', '4');
INSERT INTO `ms_article` VALUES ('6', '0', '1647414993379', '数据结构与算法队列', 'JAVA-数据结构-队列-附leetcode', '9', '0', '1', '1512382214845730821', '4');
INSERT INTO `ms_article` VALUES ('1512407854470885378', '0', '1649421106339', 'test', 'Test', '4', '0', '1', '1512407854470885380', '3');

-- ----------------------------
-- Table structure for ms_article_body
-- ----------------------------
DROP TABLE IF EXISTS `ms_article_body`;
CREATE TABLE `ms_article_body` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `content` longtext,
  `content_html` longtext,
  `article_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `article_id` (`article_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1512407854470885381 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_article_body
-- ----------------------------
INSERT INTO `ms_article_body` VALUES ('1512376562991742979', '\n## 1.简介\n\n排队——先进后出\n\n应用：浏览器回退 计算器\n\n------\n\n\n\n时间复杂度\n\n| 访问     | **O(1)** |\n| -------- | -------- |\n| **搜索** | **O(n)** |\n| **插入** | **O(1)** |\n| **删除** | **O(1)** |\n\n栈的访问、插入、删除只访问栈顶元素\n\n\n\n## 2.JAVA栈基本操作\n\n```java\npublic static void main(String[] args) {\n        //1.创建栈\n        Stack<Integer> stack = new Stack<>();\n\n        //2.添加元素 O(1)\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(stack.toString());\n\n        //3.获取栈顶元素 O(1)\n        System.out.println(stack.peek());\n\n        //4.删除栈顶元素 O(1)\n        int temp = stack.pop();\n        System.out.println(temp);\n        System.out.println(stack);\n\n        //5.栈的大小 O(1)\n        System.out.println(stack.size());\n\n        //6.栈是否为空 O(1)\n        System.out.println(stack.isEmpty());\n\n        //7.栈的遍历 O(n)\n        while(!stack.isEmpty()){\n            int num = stack.pop();\n            System.out.println(num);\n        }\n```\n\n\n\n\n\n## 3.Leetcode练习题\n\n20 有效的括号\n\n思路：\n\n遍历 传进来前括号，就把对应后括号压入栈\n\n传进来后括号，就看弹出来的一不一样\n\n```java\npublic class TestLC20 {\n    public boolean isValid(String s){\n        Stack<Character>stack = new Stack<Character>();\n        for (char c: s.toCharArray()){\n            if (c==\'(\')\n                stack.push(\')\');\n            else if (c==\'[\')\n                stack.push(\']\');\n            else if (c==\'{\')\n                stack.push(\'}\');\n            else if (stack.isEmpty()||c!=stack.pop())\n                return false;\n        }\n        return stack.isEmpty();\n    }\n}\n```\n\n\n\n496\n\n```java\nclass Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        int n = nums1.length, m = nums2.length;\n        Deque<Integer> d = new ArrayDeque<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = m - 1; i >= 0; i--) {\n            int x = nums2[i];\n            while (!d.isEmpty() && d.peekLast() <= x) d.pollLast();\n            map.put(x, d.isEmpty() ? -1 : d.peekLast());\n            d.addLast(x);\n        }\n        int[] ans = new int[n];\n        for (int i = 0; i < n; i++) ans[i] = map.get(nums1[i]);\n        return ans;\n    }\n}\n\n```\n\n', '<h2><a id=\"1_1\"></a>1.简介</h2>\n<p>排队——先进后出</p>\n<p>应用：浏览器回退 计算器</p>\n<hr />\n<p>时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th>访问</th>\n<th><strong>O(1)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>搜索</strong></td>\n<td><strong>O(n)</strong></td>\n</tr>\n<tr>\n<td><strong>插入</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n</tbody>\n</table>\n<p>栈的访问、插入、删除只访问栈顶元素</p>\n<h2><a id=\"2JAVA_23\"></a>2.JAVA栈基本操作</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">//1.创建栈</span>\n        Stack&lt;Integer&gt; stack = <span class=\"hljs-keyword\">new</span> Stack&lt;&gt;();\n\n        <span class=\"hljs-comment\">//2.添加元素 O(1)</span>\n        stack.push(<span class=\"hljs-number\">1</span>);\n        stack.push(<span class=\"hljs-number\">2</span>);\n        stack.push(<span class=\"hljs-number\">3</span>);\n        System.out.println(stack.toString());\n\n        <span class=\"hljs-comment\">//3.获取栈顶元素 O(1)</span>\n        System.out.println(stack.peek());\n\n        <span class=\"hljs-comment\">//4.删除栈顶元素 O(1)</span>\n        <span class=\"hljs-keyword\">int</span> temp = stack.pop();\n        System.out.println(temp);\n        System.out.println(stack);\n\n        <span class=\"hljs-comment\">//5.栈的大小 O(1)</span>\n        System.out.println(stack.size());\n\n        <span class=\"hljs-comment\">//6.栈是否为空 O(1)</span>\n        System.out.println(stack.isEmpty());\n\n        <span class=\"hljs-comment\">//7.栈的遍历 O(n)</span>\n        <span class=\"hljs-keyword\">while</span>(!stack.isEmpty()){\n            <span class=\"hljs-keyword\">int</span> num = stack.pop();\n            System.out.println(num);\n        }\n</code></div></pre>\n<h2><a id=\"3Leetcode_61\"></a>3.Leetcode练习题</h2>\n<p>20 有效的括号</p>\n<p>思路：</p>\n<p>遍历 传进来前括号，就把对应后括号压入栈</p>\n<p>传进来后括号，就看弹出来的一不一样</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestLC20</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(String s)</span></span>{\n        Stack&lt;Character&gt;stack = <span class=\"hljs-keyword\">new</span> Stack&lt;Character&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">char</span> c: s.toCharArray()){\n            <span class=\"hljs-keyword\">if</span> (c==<span class=\"hljs-string\">\'(\'</span>)\n                stack.push(<span class=\"hljs-string\">\')\'</span>);\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c==<span class=\"hljs-string\">\'[\'</span>)\n                stack.push(<span class=\"hljs-string\">\']\'</span>);\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c==<span class=\"hljs-string\">\'{\'</span>)\n                stack.push(<span class=\"hljs-string\">\'}\'</span>);\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (stack.isEmpty()||c!=stack.pop())\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> stack.isEmpty();\n    }\n}\n</code></div></pre>\n<p>496</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] nextGreaterElement(<span class=\"hljs-keyword\">int</span>[] nums1, <span class=\"hljs-keyword\">int</span>[] nums2) {\n        <span class=\"hljs-keyword\">int</span> n = nums1.length, m = nums2.length;\n        Deque&lt;Integer&gt; d = <span class=\"hljs-keyword\">new</span> ArrayDeque&lt;&gt;();\n        Map&lt;Integer, Integer&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = m - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n            <span class=\"hljs-keyword\">int</span> x = nums2[i];\n            <span class=\"hljs-keyword\">while</span> (!d.isEmpty() &amp;&amp; d.peekLast() &lt;= x) d.pollLast();\n            map.put(x, d.isEmpty() ? -<span class=\"hljs-number\">1</span> : d.peekLast());\n            d.addLast(x);\n        }\n        <span class=\"hljs-keyword\">int</span>[] ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) ans[i] = map.get(nums1[i]);\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n}\n\n</code></div></pre>\n', '2');
INSERT INTO `ms_article_body` VALUES ('1512378940637765633', '## 1.简介\n\n在连续存储空间中，存储一组相同类型的元素\n\neg:   \n\n[1,2,3]  yes        [100,\'av\',13.14] no\n\n假设下面是个内存块\n\n| 1    |      |      |\n| ---- | ---- | ---- |\n|      | 2    |      |\n|      |      | 3    |\n\nno——链表\n\n------\n\n\n\n|      |      |      |\n| :--: | :--: | :--: |\n|  1   |  2   |  3   |\n|      |      |      |\n\nyes\n\n------\n\n数组a= [1,2,3]\n\n数组元素指          1,2,3\n\n数组索引指下标   0,1,2\n\n数组访问 a[1] - >2 索引找元素\n\n数组搜索 直接找2这个值 与索引无关\n\n------\n\n\n\n时间复杂度\n\n| 访问     | **O(1)** |\n| -------- | -------- |\n| **搜索** | **O(n)** |\n| **插入** | **O(n)** |\n| **删除** | **O(n)** |\n\n特点：适合读，不适合写\n\n## 2.JAVA数组基本操作\n\n**2.1 创建数组**\n\n```java\n        //数组创建1 已知数组内容\n        int[] a = {1,2,3};\n        System.out.println(\"a:\" + Arrays.toString(a));\n\n        //数组创建2 已知数组内容\n        int[] b = new int[]{1,2,3};\n        System.out.println(\"b:\" + Arrays.toString(b));\n\n        //数组创建3 不知道数组内容，知道数组长度，先声明一块区域\n        int[] c = new int[3];\n        //可以之后添加\n        for (int i = 0; i < c.length; i++) {\n            c[i] = i;\n        }\n        System.out.println(\"c:\" + Arrays.toString(c));\n\n        //数组创建4 不知道数组内容，也不知道数组长度 - 一般用这个\n        ArrayList<Integer> arr = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            arr.add(i+1);\n        }\n        System.out.println(\"arr:\" + arr.toString());\n```\n\n**2.2 添加元素** \n\n前三种需要先扩容\n\n推荐第四种 直接调用方法\n\n```java\n        //添加元素 默认添加尾部且尾部还有空间时间复杂度 O(1)\n        //尾部没有空间，需要重新找内存扩容 再添加O(n)\n        arr.add(9);\n        System.out.println(\"arr:\" + arr.toString()); \n\n        //插入 具体位置O(n)\n        arr.add(3,8);\n        System.out.println(\"arr:\" + arr.toString());\n```\n\n**2.3 访问元素O(1)**\n\n```JAVA\n//访问元素\n        int c1 = c[1];\n        int arr1 = arr.get(1);\n        System.out.println(\"c1:\" + c1);\n        System.out.println(\"arr1:\" + arr1);\n```\n\n**2.4 更新元素 O(1)**\n\n```java\n//更新元素\n        c[1] = 11;\n        arr.set(1,11);\n        System.out.println(\"c1:\" + c[1]);\n        System.out.println(\"arr1:\" + arr.get(1));\n```\n\n**2.5 删除元素O(n)**\n\n前三种太麻烦，还是用第四种\n\n```java\n//删除元素\n        arr.remove(1);\n        System.out.println(\"arr1:\" + arr.get(1));\n```\n\n**2.6 数组长度**\n\n创建的时候，内部有一个count变量，所以  O(1)\n\n```JAVA\n//数组长度\n        int cSize = c.length;\n        int arrSize = arr.size();\n        System.out.println(\"c length:\" + cSize);\n        System.out.println(\"arrSize length:\" + arrSize);\n```\n\n**2.7 遍历数组 O(n)**\n\n```java\n  //遍历数组\n        for (int i = 0; i < c.length; i++) {\n            int current = c[i];\n            System.out.println(\"c at index\" + i +\":\" + current);\n        }\n\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            System.out.println(\"arr at index\" + i +\":\" + current);\n        }\n\n```\n\n**2.8 查找元素 O(n)**\n\n```JAVA\n//查找元素\nfor (int i = 0; i < c.length; i++) {\n    if (c[i] == 0){\n        System.out.println(\"yes! We found it \");\n    }\n}\n\nboolean is9 = arr.contains(9);\nSystem.out.println(is9);\n```\n\n**2.9 数组排序 O(nlogN)**\n\n```java\n//数组排序//重置 数组 乱序c = new int[]{2,3,1};arr = new ArrayList<>();arr.add(2);arr.add(3);arr.add(1);System.out.println(\"c:\" + Arrays.toString(c));System.out.println(\"arr:\" + arr.toString());//调用方法排序 从小到大 时间复杂度O(nlogN)Arrays.sort(c);Collections.sort(arr);System.out.println(\"c:\" + Arrays.toString(c));System.out.println(\"arr:\" + arr);//从大到小Collections.sort(arr,Collections.reverseOrder());System.out.println(\"arr:\" + arr);\n```\n\n## 3.Leetcode练习题\n\n485\n\n```java\nclass Solution {    public int findMaxConsecutiveOnes(int[] nums) {        //数组为空直接 返回        if(nums == null || nums.length == 0){            return 0;        }        //设置两个值 标记一组的计数 和 目前标记的连续最大值        int count = 0;        int max = 0;        for(int i = 0; i<nums.length; i++){            if(nums[i] == 1){                //是1 就计数++ 同时更新最大值                count++;                        max = Math.max(max,count);            }else{                //不是1 就重新计数                count = 0;            }        }        return max;    }}\n```\n\n283\n\n```java\nclass Solution {    //题目难点 空间    public void moveZeroes(int[] nums) {        //设置一个值 统计0的值        int count = 0;        for(int i = 0; i < nums.length; i++){            if(nums[i] == 0) count++;        }        //将非0值排在数组前面        int index = 0;        for(int i = 0; i<nums.length; i++){            if(nums[i] != 0){                nums[index++] = nums[i];            }        }        //用0把剩下位置填满        for(int i = 0; i<count; i++){            nums[index++] =0;        }    }}\n```\n\n```java\n上一思路简化版class Solution {    public void moveZeroes(int[] nums) {        //设置标记        int k = 0;        for(int x : nums)            if(x != 0) nums[k++] = x;        while(k < nums.length)  nums[k++] = 0;          }}\n```\n\n', '<h2><a id=\"1_0\"></a>1.简介</h2>\n<p>在连续存储空间中，存储一组相同类型的元素</p>\n<p>eg:</p>\n<p>[1,2,3]  yes        [100,‘av’,13.14] no</p>\n<p>假设下面是个内存块</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>no——链表</p>\n<hr />\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>yes</p>\n<hr />\n<p>数组a= [1,2,3]</p>\n<p>数组元素指          1,2,3</p>\n<p>数组索引指下标   0,1,2</p>\n<p>数组访问 a[1] - &gt;2 索引找元素</p>\n<p>数组搜索 直接找2这个值 与索引无关</p>\n<hr />\n<p>时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th>访问</th>\n<th><strong>O(1)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>搜索</strong></td>\n<td><strong>O(n)</strong></td>\n</tr>\n<tr>\n<td><strong>插入</strong></td>\n<td><strong>O(n)</strong></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td><strong>O(n)</strong></td>\n</tr>\n</tbody>\n</table>\n<p>特点：适合读，不适合写</p>\n<h2><a id=\"2JAVA_54\"></a>2.JAVA数组基本操作</h2>\n<p><strong>2.1 创建数组</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">        <span class=\"hljs-comment\">//数组创建1 已知数组内容</span>\n        <span class=\"hljs-keyword\">int</span>[] a = {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>};\n        System.out.println(<span class=\"hljs-string\">\"a:\"</span> + Arrays.toString(a));\n\n        <span class=\"hljs-comment\">//数组创建2 已知数组内容</span>\n        <span class=\"hljs-keyword\">int</span>[] b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>};\n        System.out.println(<span class=\"hljs-string\">\"b:\"</span> + Arrays.toString(b));\n\n        <span class=\"hljs-comment\">//数组创建3 不知道数组内容，知道数组长度，先声明一块区域</span>\n        <span class=\"hljs-keyword\">int</span>[] c = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">3</span>];\n        <span class=\"hljs-comment\">//可以之后添加</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c.length; i++) {\n            c[i] = i;\n        }\n        System.out.println(<span class=\"hljs-string\">\"c:\"</span> + Arrays.toString(c));\n\n        <span class=\"hljs-comment\">//数组创建4 不知道数组内容，也不知道数组长度 - 一般用这个</span>\n        ArrayList&lt;Integer&gt; arr = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n            arr.add(i+<span class=\"hljs-number\">1</span>);\n        }\n        System.out.println(<span class=\"hljs-string\">\"arr:\"</span> + arr.toString());\n</code></div></pre>\n<p><strong>2.2 添加元素</strong></p>\n<p>前三种需要先扩容</p>\n<p>推荐第四种 直接调用方法</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">        <span class=\"hljs-comment\">//添加元素 默认添加尾部且尾部还有空间时间复杂度 O(1)</span>\n        <span class=\"hljs-comment\">//尾部没有空间，需要重新找内存扩容 再添加O(n)</span>\n        arr.add(<span class=\"hljs-number\">9</span>);\n        System.out.println(<span class=\"hljs-string\">\"arr:\"</span> + arr.toString()); \n\n        <span class=\"hljs-comment\">//插入 具体位置O(n)</span>\n        arr.add(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>);\n        System.out.println(<span class=\"hljs-string\">\"arr:\"</span> + arr.toString());\n</code></div></pre>\n<p><strong>2.3 访问元素O(1)</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-JAVA\"><span class=\"hljs-comment\">//访问元素</span>\n        <span class=\"hljs-keyword\">int</span> c1 = c[<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">int</span> arr1 = arr.get(<span class=\"hljs-number\">1</span>);\n        System.out.println(<span class=\"hljs-string\">\"c1:\"</span> + c1);\n        System.out.println(<span class=\"hljs-string\">\"arr1:\"</span> + arr1);\n</code></div></pre>\n<p><strong>2.4 更新元素 O(1)</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//更新元素</span>\n        c[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">11</span>;\n        arr.set(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">11</span>);\n        System.out.println(<span class=\"hljs-string\">\"c1:\"</span> + c[<span class=\"hljs-number\">1</span>]);\n        System.out.println(<span class=\"hljs-string\">\"arr1:\"</span> + arr.get(<span class=\"hljs-number\">1</span>));\n</code></div></pre>\n<p><strong>2.5 删除元素O(n)</strong></p>\n<p>前三种太麻烦，还是用第四种</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//删除元素</span>\n        arr.remove(<span class=\"hljs-number\">1</span>);\n        System.out.println(<span class=\"hljs-string\">\"arr1:\"</span> + arr.get(<span class=\"hljs-number\">1</span>));\n</code></div></pre>\n<p><strong>2.6 数组长度</strong></p>\n<p>创建的时候，内部有一个count变量，所以  O(1)</p>\n<pre><div class=\"hljs\"><code class=\"lang-JAVA\"><span class=\"hljs-comment\">//数组长度</span>\n        <span class=\"hljs-keyword\">int</span> cSize = c.length;\n        <span class=\"hljs-keyword\">int</span> arrSize = arr.size();\n        System.out.println(<span class=\"hljs-string\">\"c length:\"</span> + cSize);\n        System.out.println(<span class=\"hljs-string\">\"arrSize length:\"</span> + arrSize);\n</code></div></pre>\n<p><strong>2.7 遍历数组 O(n)</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">  <span class=\"hljs-comment\">//遍历数组</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c.length; i++) {\n            <span class=\"hljs-keyword\">int</span> current = c[i];\n            System.out.println(<span class=\"hljs-string\">\"c at index\"</span> + i +<span class=\"hljs-string\">\":\"</span> + current);\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.size(); i++) {\n            <span class=\"hljs-keyword\">int</span> current = arr.get(i);\n            System.out.println(<span class=\"hljs-string\">\"arr at index\"</span> + i +<span class=\"hljs-string\">\":\"</span> + current);\n        }\n\n</code></div></pre>\n<p><strong>2.8 查找元素 O(n)</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-JAVA\"><span class=\"hljs-comment\">//查找元素</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (c[i] == <span class=\"hljs-number\">0</span>){\n        System.out.println(<span class=\"hljs-string\">\"yes! We found it \"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">boolean</span> is9 = arr.contains(<span class=\"hljs-number\">9</span>);\nSystem.out.println(is9);\n</code></div></pre>\n<p><strong>2.9 数组排序 O(nlogN)</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//数组排序//重置 数组 乱序c = new int[]{2,3,1};arr = new ArrayList&lt;&gt;();arr.add(2);arr.add(3);arr.add(1);System.out.println(\"c:\" + Arrays.toString(c));System.out.println(\"arr:\" + arr.toString());//调用方法排序 从小到大 时间复杂度O(nlogN)Arrays.sort(c);Collections.sort(arr);System.out.println(\"c:\" + Arrays.toString(c));System.out.println(\"arr:\" + arr);//从大到小Collections.sort(arr,Collections.reverseOrder());System.out.println(\"arr:\" + arr);</span>\n</code></div></pre>\n<h2><a id=\"3Leetcode_178\"></a>3.Leetcode练习题</h2>\n<p>485</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">findMaxConsecutiveOnes</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums)</span> </span>{        <span class=\"hljs-comment\">//数组为空直接 返回        if(nums == null || nums.length == 0){            return 0;        }        //设置两个值 标记一组的计数 和 目前标记的连续最大值        int count = 0;        int max = 0;        for(int i = 0; i&lt;nums.length; i++){            if(nums[i] == 1){                //是1 就计数++ 同时更新最大值                count++;                        max = Math.max(max,count);            }else{                //不是1 就重新计数                count = 0;            }        }        return max;    }}</span>\n</code></div></pre>\n<p>283</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{    <span class=\"hljs-comment\">//题目难点 空间    public void moveZeroes(int[] nums) {        //设置一个值 统计0的值        int count = 0;        for(int i = 0; i &lt; nums.length; i++){            if(nums[i] == 0) count++;        }        //将非0值排在数组前面        int index = 0;        for(int i = 0; i&lt;nums.length; i++){            if(nums[i] != 0){                nums[index++] = nums[i];            }        }        //用0把剩下位置填满        for(int i = 0; i&lt;count; i++){            nums[index++] =0;        }    }}</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">上一思路简化版<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">moveZeroes</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums)</span> </span>{        <span class=\"hljs-comment\">//设置标记        int k = 0;        for(int x : nums)            if(x != 0) nums[k++] = x;        while(k &lt; nums.length)  nums[k++] = 0;          }}</span>\n</code></div></pre>\n', '3');
INSERT INTO `ms_article_body` VALUES ('1512381073357508609', '## 1.简介\n\n假设下面是个内存块 非连续内存空间存储数据\n\n|      |      | 1    |\n| ---- | ---- | ---- |\n|      | 2    |      |\n|      |      | 3    |\n\nyes——链表\n\n结构：val next\n\n| 元素 指针 | ----->|元素 指针 |----->|元素 指针| ----->null\n\n------\n\n\n\n单端链表\n\n双端链表\n\n------\n\n\n\n时间复杂度\n\n| 访问     | **O(n)** |\n| -------- | -------- |\n| **搜索** | **O(n)** |\n| **插入** | **O(1)** |\n| **删除** | **O(1)** |\n\n特点：读少写多，写很快，读很慢\n\n## 2.JAVA链表基本操作\n\n### **2.1 创建链表**\n\n```java\n       //1.创建链表\n        LinkedList<Integer> list = new LinkedList<>();\n    \n```\n\n### **2.2 添加元素** \n\n```java\n       //2.添加元素 插入操作时间复杂度O(1)\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        System.out.println(list.toString());\n        // 插入操作时间复杂度O(1) 但是由于你要先找到这个位置 所以总体时间复杂度O(n)\n        list.add(3,99);\n        System.out.println(list.toString());\n\n       \n```\n\n### **2.3 访问元素O(1)**\n\n```JAVA\n    	//3.访问元素 O(n)\n        int element = list.get(3);\n        System.out.println(element);\n\n```\n\n### **2.4 更新元素 O(1)**\n\n```java\n//4.更新元素 O(n)\n        list.set(2,88);\n        System.out.println(list.toString());   \n```\n\n### **2.5 删除元素O(n)**\n\n```java\n //5.删除元素 O(n) 搜索到这个数O(n) 删除这个元素只有O(1)\n        list.remove(3);\n        System.out.println(list.toString());\n```\n\n### **2.6 链表长度**\n\n创建的时候，内部有一个count变量，所以  O(1)\n\n```JAVA\n//6. 长度 O(1) 里面有一个定义的变量\n        int length = list.size();\n        System.out.println(length);\n```\n\n### **2.7 链表搜索**\n\n```java\n//7.按值搜索元素 O(n)\n        int index = list.indexOf(99);\n        System.out.println(index);\n```\n\n\n\n## 3.Leetcode练习题\n\n### 160 相交链表\n\n题目思路，两个都从头同时开始走，走到头就从另外一个链表的开头开始走，\n\n如果两个相交，那么最后一部分路是一样的，走同样的路必然相遇，\n\n所以如果相遇就将后面的部分都返回\n\n没相遇到底 两轮还是null 返回null\n\n```java\npublic ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n    //如果两个链表有一个为空，那必然不想交，直接返回null\n    if (headA == null || headB == null) return null;\n    //定义两个链表的起点\n    ListNode pA = headA, pB = headB;\n    //如果两个值不相等，就遍历下去\n    while (pA != pB) {\n        //pA 遍历到最后一个，就从b的开始从头遍历\n        //注意是headB\n        pA = pA == null ? headB : pA.next;\n        //pB 遍历到最后一个，就从a的开始从头遍历\n        //注意是headA\n        pB = pB == null ? headA : pB.next;\n    }\n    //返回pA pB都行 如果到底就是null 如果没到底就是相交部分\n    return pA;\n}\n\n\n```\n\n### 203移除链表元素\n\n思路：\n\n首先设置一个节点标记接下来整个链表\n\n然后节点往后遍历，遇到对应值直接改指针跳过该值\n\n```java\npublic ListNode remoElements(ListNode head, int val){\n    //设置一个节点指向该链表，\n    ListNode headhead =  new ListNode(0);\n    headhead.next = head;\n    //设置一个节点用来遍历\n    ListNode cur = headhead;\n    //当cur指向节点不为null就遍历\n    while(cur.next != null){\n        //如果cur指向的节点值为对应值，则直接将节点指向下一个跳过该节点\n        if(cur.next.val = val){\n            cur.next = cur.next.next;\n        }else{\n            //否则就正常遍历\n            cur = cur.next;\n        }\n        \n    }\n    return headhead.next;\n    \n}\n```\n\n\n\n### 206 反转链表\n\n思路：设置一个空的头结点，一组一组反转，三个依次赋值\n\n```java\npublic ListNode reverseList(ListNode head){\n    if(head == null || head.next == null) return head;\n    ListNode pre = null;\n    ListNode cur = head;\n    ListNode next = head.next;\n    while(next != null){\n        //当前节点指针，指向前一个节点\n        cur.next = pre;\n        //前一个节点的值换为当前节点\n        pre = cur;\n        //当前节点换为下一个节点的值，也就是说完成了下一个节点指向原先当前节点\n        cur = next;\n        //下一个节点换为下下个节点开始新一轮循环\n        next = next.next;\n        \n      \n    }\n    //循环结束，将最后指向的节点反过来\n    cur.next = pre;\n    return cur;\n}\n```\n\n', '<h2><a id=\"1_0\"></a>1.简介</h2>\n<p>假设下面是个内存块 非连续内存空间存储数据</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th>1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>yes——链表</p>\n<p>结构：val next</p>\n<p>| 元素 指针 | -----&gt;|元素 指针 |-----&gt;|元素 指针| -----&gt;null</p>\n<hr />\n<p>单端链表</p>\n<p>双端链表</p>\n<hr />\n<p>时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th>访问</th>\n<th><strong>O(n)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>搜索</strong></td>\n<td><strong>O(n)</strong></td>\n</tr>\n<tr>\n<td><strong>插入</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n</tbody>\n</table>\n<p>特点：读少写多，写很快，读很慢</p>\n<h2><a id=\"2JAVA_37\"></a>2.JAVA链表基本操作</h2>\n<h3><a id=\"21__39\"></a><strong>2.1 创建链表</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\">       <span class=\"hljs-comment\">//1.创建链表</span>\n        LinkedList&lt;Integer&gt; list = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();\n    \n</code></div></pre>\n<h3><a id=\"22__47\"></a><strong>2.2 添加元素</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\">       <span class=\"hljs-comment\">//2.添加元素 插入操作时间复杂度O(1)</span>\n        list.add(<span class=\"hljs-number\">1</span>);\n        list.add(<span class=\"hljs-number\">2</span>);\n        list.add(<span class=\"hljs-number\">3</span>);\n        list.add(<span class=\"hljs-number\">4</span>);\n        list.add(<span class=\"hljs-number\">5</span>);\n        System.out.println(list.toString());\n        <span class=\"hljs-comment\">// 插入操作时间复杂度O(1) 但是由于你要先找到这个位置 所以总体时间复杂度O(n)</span>\n        list.add(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">99</span>);\n        System.out.println(list.toString());\n\n       \n</code></div></pre>\n<h3><a id=\"23_O1_64\"></a><strong>2.3 访问元素O(1)</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-JAVA\">    	<span class=\"hljs-comment\">//3.访问元素 O(n)</span>\n        <span class=\"hljs-keyword\">int</span> element = list.get(<span class=\"hljs-number\">3</span>);\n        System.out.println(element);\n\n</code></div></pre>\n<h3><a id=\"24__O1_73\"></a><strong>2.4 更新元素 O(1)</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//4.更新元素 O(n)</span>\n        list.set(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">88</span>);\n        System.out.println(list.toString());   \n</code></div></pre>\n<h3><a id=\"25_On_81\"></a><strong>2.5 删除元素O(n)</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"> <span class=\"hljs-comment\">//5.删除元素 O(n) 搜索到这个数O(n) 删除这个元素只有O(1)</span>\n        list.remove(<span class=\"hljs-number\">3</span>);\n        System.out.println(list.toString());\n</code></div></pre>\n<h3><a id=\"26__89\"></a><strong>2.6 链表长度</strong></h3>\n<p>创建的时候，内部有一个count变量，所以  O(1)</p>\n<pre><div class=\"hljs\"><code class=\"lang-JAVA\"><span class=\"hljs-comment\">//6. 长度 O(1) 里面有一个定义的变量</span>\n        <span class=\"hljs-keyword\">int</span> length = list.size();\n        System.out.println(length);\n</code></div></pre>\n<h3><a id=\"27__99\"></a><strong>2.7 链表搜索</strong></h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//7.按值搜索元素 O(n)</span>\n        <span class=\"hljs-keyword\">int</span> index = list.indexOf(<span class=\"hljs-number\">99</span>);\n        System.out.println(index);\n</code></div></pre>\n<h2><a id=\"3Leetcode_109\"></a>3.Leetcode练习题</h2>\n<h3><a id=\"160__111\"></a>160 相交链表</h3>\n<p>题目思路，两个都从头同时开始走，走到头就从另外一个链表的开头开始走，</p>\n<p>如果两个相交，那么最后一部分路是一样的，走同样的路必然相遇，</p>\n<p>所以如果相遇就将后面的部分都返回</p>\n<p>没相遇到底 两轮还是null 返回null</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ListNode <span class=\"hljs-title\">getIntersectionNode</span><span class=\"hljs-params\">(ListNode headA, ListNode headB)</span> </span>{\n    <span class=\"hljs-comment\">//如果两个链表有一个为空，那必然不想交，直接返回null</span>\n    <span class=\"hljs-keyword\">if</span> (headA == <span class=\"hljs-keyword\">null</span> || headB == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-comment\">//定义两个链表的起点</span>\n    ListNode pA = headA, pB = headB;\n    <span class=\"hljs-comment\">//如果两个值不相等，就遍历下去</span>\n    <span class=\"hljs-keyword\">while</span> (pA != pB) {\n        <span class=\"hljs-comment\">//pA 遍历到最后一个，就从b的开始从头遍历</span>\n        <span class=\"hljs-comment\">//注意是headB</span>\n        pA = pA == <span class=\"hljs-keyword\">null</span> ? headB : pA.next;\n        <span class=\"hljs-comment\">//pB 遍历到最后一个，就从a的开始从头遍历</span>\n        <span class=\"hljs-comment\">//注意是headA</span>\n        pB = pB == <span class=\"hljs-keyword\">null</span> ? headA : pB.next;\n    }\n    <span class=\"hljs-comment\">//返回pA pB都行 如果到底就是null 如果没到底就是相交部分</span>\n    <span class=\"hljs-keyword\">return</span> pA;\n}\n\n\n</code></div></pre>\n<h3><a id=\"203_143\"></a>203移除链表元素</h3>\n<p>思路：</p>\n<p>首先设置一个节点标记接下来整个链表</p>\n<p>然后节点往后遍历，遇到对应值直接改指针跳过该值</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ListNode <span class=\"hljs-title\">remoElements</span><span class=\"hljs-params\">(ListNode head, <span class=\"hljs-keyword\">int</span> val)</span></span>{\n    <span class=\"hljs-comment\">//设置一个节点指向该链表，</span>\n    ListNode headhead =  <span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-number\">0</span>);\n    headhead.next = head;\n    <span class=\"hljs-comment\">//设置一个节点用来遍历</span>\n    ListNode cur = headhead;\n    <span class=\"hljs-comment\">//当cur指向节点不为null就遍历</span>\n    <span class=\"hljs-keyword\">while</span>(cur.next != <span class=\"hljs-keyword\">null</span>){\n        <span class=\"hljs-comment\">//如果cur指向的节点值为对应值，则直接将节点指向下一个跳过该节点</span>\n        <span class=\"hljs-keyword\">if</span>(cur.next.val = val){\n            cur.next = cur.next.next;\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-comment\">//否则就正常遍历</span>\n            cur = cur.next;\n        }\n        \n    }\n    <span class=\"hljs-keyword\">return</span> headhead.next;\n    \n}\n</code></div></pre>\n<h3><a id=\"206__176\"></a>206 反转链表</h3>\n<p>思路：设置一个空的头结点，一组一组反转，三个依次赋值</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ListNode <span class=\"hljs-title\">reverseList</span><span class=\"hljs-params\">(ListNode head)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(head == <span class=\"hljs-keyword\">null</span> || head.next == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span> head;\n    ListNode pre = <span class=\"hljs-keyword\">null</span>;\n    ListNode cur = head;\n    ListNode next = head.next;\n    <span class=\"hljs-keyword\">while</span>(next != <span class=\"hljs-keyword\">null</span>){\n        <span class=\"hljs-comment\">//当前节点指针，指向前一个节点</span>\n        cur.next = pre;\n        <span class=\"hljs-comment\">//前一个节点的值换为当前节点</span>\n        pre = cur;\n        <span class=\"hljs-comment\">//当前节点换为下一个节点的值，也就是说完成了下一个节点指向原先当前节点</span>\n        cur = next;\n        <span class=\"hljs-comment\">//下一个节点换为下下个节点开始新一轮循环</span>\n        next = next.next;\n        \n      \n    }\n    <span class=\"hljs-comment\">//循环结束，将最后指向的节点反过来</span>\n    cur.next = pre;\n    <span class=\"hljs-keyword\">return</span> cur;\n}\n</code></div></pre>\n', '4');
INSERT INTO `ms_article_body` VALUES ('1512381289016037380', '\n## 1.简介\n\n哈希表也叫散列表\n\n键值对      key -> value \n\neg: 2019141022318 ->  张三\n\n------\n\n\n\n时间复杂度\n\n| 访问     | 不存在   |\n| -------- | -------- |\n| **搜索** | **O(1)** |\n| **插入** | **O(1)** |\n| **删除** | **O(1)** |\n\n（碰撞 **O(k)** ）\n\n\n\n## 2.JAVA 哈希表基本操作\n\n```java\npublic static void main(String[] args) {\n        // 创建哈希表\n        String[] hashTable = new String[4];\n\n        HashMap<Integer,String> map = new HashMap<>();\n\n        // 添加元素 O(1)\n        hashTable[1] = \"hanmeimei\";\n        hashTable[2] = \"lihua\";\n        hashTable[3] = \"siyangyuan\";\n\n        map.put(1,\"hanmeimei\");\n        map.put(2,\"lihua\");\n        map.put(3,\"siyangyuan\");\n\n        //更新元素 O(1)\n        hashTable[1] = \"xiaoming\";\n        map.put(1,\"xioaming\");\n\n        //删除元素 O(1)\n        hashTable[1] = \"\";\n        map.remove(1);\n\n        //获取元素 O(1)\n        String temp = hashTable[3];\n        map.get(3);\n        \n        //检查key是否存在 数组方式创建的不太好找 O(1)\n        map.containsKey(3);\n        \n        //长度 O(1)\n        map.isEmpty();\n\n    }\n```\n\n\n\n\n\n## 3.Leetcode练习题\n\n217.存在重复元素\n\n统计结构 一一对应  1-n次 2-n次 3-n次 4-n次 所以用哈希表\n\n数组长度不确定，用JAVA自带的hashmap\n\nkey 存取数组元素 value存取数组元素出现次数\n\n\n\n简介方法用HashSet  基于 HashMap 来实现的，是一个不允许有重复元素的集合。\n\n```java\npublic boolean containsDuplicate(int[] nums) {\n        //定义HashSet \n        Set<Integer> set = new HashSet<Integer>();\n        //遍历数组 HashSet不允许存在相同值，所以如果无法加入，就证明寄了\n        for(int x : nums){\n            if(!set.add(x)){\n                return true;\n            }\n        }\n        return false;\n\n    }\n```\n\n389 找不同\n\n```java\nclass Solution {\n    public char findTheDifference(String s, String t) {\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            cnt[ch - \'a\']++;\n        }\n        for (int i = 0; i < t.length(); ++i) {\n            char ch = t.charAt(i);\n            cnt[ch - \'a\']--;\n            if (cnt[ch - \'a\'] < 0) {\n                return ch;\n            }\n        }\n        return \' \';\n    }\n}\n\n```\n\n```java\npublic char findTheDifference(String s, String t) {\n        //来自可爱的饲养员姐姐\n        int sizeS = s.length();\n        int sizeT = t.length();\n        //如果s为空，那么直接返回t第一个元素\n        if(sizeS == 0){\n            return t.charAt(0);\n        }\n        int[] table = new int[26];\n        //遍历两个数组，前一个数组有的 都- 后一个数组有的都+\n        for(int i = 0; i<sizeT; i++){\n            if(i<sizeS){\n                //求出ASCII码\n                table[s.charAt(i) - \'a\']++;\n            }\n            table[t.charAt(i) - \'a\']--;\n        }\n\n        for(int i = 0; i < 26; i++){\n            //遍历数组，找到那个不为零的值\n            if(table[i] != 0){\n                //+a回到原来的ASCII码，然后转化成对应字母\n                return (char)(\'a\' + i);\n            }\n        }\n        return \'a\';\n\n\n    }\n```\n\n1.两数之和\n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> hashtable = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.length; ++i) {\n            if (hashtable.containsKey(target - nums[i])) {\n                return new int[]{hashtable.get(target - nums[i]), i};\n            }\n            hashtable.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n\n```\n\n', '<h2><a id=\"1_1\"></a>1.简介</h2>\n<p>哈希表也叫散列表</p>\n<p>键值对      key -&gt; value</p>\n<p>eg: 2019141022318 -&gt;  张三</p>\n<hr />\n<p>时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th>访问</th>\n<th>不存在</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>搜索</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n<tr>\n<td><strong>插入</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n</tbody>\n</table>\n<p>（碰撞 <strong>O(k)</strong> ）</p>\n<h2><a id=\"2JAVA__25\"></a>2.JAVA 哈希表基本操作</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建哈希表</span>\n        String[] hashTable = <span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">4</span>];\n\n        HashMap&lt;Integer,String&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n\n        <span class=\"hljs-comment\">// 添加元素 O(1)</span>\n        hashTable[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"hanmeimei\"</span>;\n        hashTable[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"lihua\"</span>;\n        hashTable[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"siyangyuan\"</span>;\n\n        map.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"hanmeimei\"</span>);\n        map.put(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"lihua\"</span>);\n        map.put(<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">\"siyangyuan\"</span>);\n\n        <span class=\"hljs-comment\">//更新元素 O(1)</span>\n        hashTable[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"xiaoming\"</span>;\n        map.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"xioaming\"</span>);\n\n        <span class=\"hljs-comment\">//删除元素 O(1)</span>\n        hashTable[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"\"</span>;\n        map.remove(<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\">//获取元素 O(1)</span>\n        String temp = hashTable[<span class=\"hljs-number\">3</span>];\n        map.get(<span class=\"hljs-number\">3</span>);\n        \n        <span class=\"hljs-comment\">//检查key是否存在 数组方式创建的不太好找 O(1)</span>\n        map.containsKey(<span class=\"hljs-number\">3</span>);\n        \n        <span class=\"hljs-comment\">//长度 O(1)</span>\n        map.isEmpty();\n\n    }\n</code></div></pre>\n<h2><a id=\"3Leetcode_68\"></a>3.Leetcode练习题</h2>\n<p>217.存在重复元素</p>\n<p>统计结构 一一对应  1-n次 2-n次 3-n次 4-n次 所以用哈希表</p>\n<p>数组长度不确定，用JAVA自带的hashmap</p>\n<p>key 存取数组元素 value存取数组元素出现次数</p>\n<p>简介方法用HashSet  基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">containsDuplicate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums)</span> </span>{\n        <span class=\"hljs-comment\">//定义HashSet </span>\n        Set&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> HashSet&lt;Integer&gt;();\n        <span class=\"hljs-comment\">//遍历数组 HashSet不允许存在相同值，所以如果无法加入，就证明寄了</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> x : nums){\n            <span class=\"hljs-keyword\">if</span>(!set.add(x)){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\n    }\n</code></div></pre>\n<p>389 找不同</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">findTheDifference</span><span class=\"hljs-params\">(String s, String t)</span> </span>{\n        <span class=\"hljs-keyword\">int</span>[] cnt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">26</span>];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.length(); ++i) {\n            <span class=\"hljs-keyword\">char</span> ch = s.charAt(i);\n            cnt[ch - <span class=\"hljs-string\">\'a\'</span>]++;\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; t.length(); ++i) {\n            <span class=\"hljs-keyword\">char</span> ch = t.charAt(i);\n            cnt[ch - <span class=\"hljs-string\">\'a\'</span>]--;\n            <span class=\"hljs-keyword\">if</span> (cnt[ch - <span class=\"hljs-string\">\'a\'</span>] &lt; <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">return</span> ch;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\' \'</span>;\n    }\n}\n\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">findTheDifference</span><span class=\"hljs-params\">(String s, String t)</span> </span>{\n        <span class=\"hljs-comment\">//来自可爱的饲养员姐姐</span>\n        <span class=\"hljs-keyword\">int</span> sizeS = s.length();\n        <span class=\"hljs-keyword\">int</span> sizeT = t.length();\n        <span class=\"hljs-comment\">//如果s为空，那么直接返回t第一个元素</span>\n        <span class=\"hljs-keyword\">if</span>(sizeS == <span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">return</span> t.charAt(<span class=\"hljs-number\">0</span>);\n        }\n        <span class=\"hljs-keyword\">int</span>[] table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">26</span>];\n        <span class=\"hljs-comment\">//遍历两个数组，前一个数组有的 都- 后一个数组有的都+</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;sizeT; i++){\n            <span class=\"hljs-keyword\">if</span>(i&lt;sizeS){\n                <span class=\"hljs-comment\">//求出ASCII码</span>\n                table[s.charAt(i) - <span class=\"hljs-string\">\'a\'</span>]++;\n            }\n            table[t.charAt(i) - <span class=\"hljs-string\">\'a\'</span>]--;\n        }\n\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">26</span>; i++){\n            <span class=\"hljs-comment\">//遍历数组，找到那个不为零的值</span>\n            <span class=\"hljs-keyword\">if</span>(table[i] != <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-comment\">//+a回到原来的ASCII码，然后转化成对应字母</span>\n                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">char</span>)(<span class=\"hljs-string\">\'a\'</span> + i);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'a\'</span>;\n\n\n    }\n</code></div></pre>\n<p>1.两数之和</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] twoSum(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target) {\n        Map&lt;Integer, Integer&gt; hashtable = <span class=\"hljs-keyword\">new</span> HashMap&lt;Integer, Integer&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.length; ++i) {\n            <span class=\"hljs-keyword\">if</span> (hashtable.containsKey(target - nums[i])) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]{hashtable.get(target - nums[i]), i};\n            }\n            hashtable.put(nums[i], i);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">0</span>];\n    }\n}\n\n</code></div></pre>\n', '5');
INSERT INTO `ms_article_body` VALUES ('1512382214845730821', '\n## 1.简介\n\n排队——先进先出\n\n单端队列—— 只有一个口可以进，一个口可以出\n\n双端队列——  两个都可以进，两个口都可以出\n\n左进右出 右进左出\n\n------\n\n\n\n时间复杂度\n\n| 访问     | **O(N)** |\n| -------- | -------- |\n| **搜索** | **O(n)** |\n| **插入** | **O(1)** |\n| **删除** | **O(1)** |\n\n访问搜索都要从头到尾找\n\n\n\n## 2.JAVA队列基本操作\n\n```java\n        //创建队列 使用数组构建 添加删除时间复杂度容易变成O(n)\n        Queue<Integer> queue = new LinkedList<>();\n\n        //添加元素 时间复杂度O(1)\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        System.out.println(queue.toString());\n\n        //获取元素 获取即将出队的元素 时间复杂度O(1)\n        int temp1 = queue.peek();\n        System.out.println(temp1);\n        \n        //删除元素 删除即将出队的元素 时间复杂度O(1)\n        int temp2 = queue.poll();\n        System.out.println(temp2);\n        System.out.println(queue.toString());\n        \n        //判断队列是否为空 时间复杂度O(1)\n        System.out.println(queue.isEmpty());\n        \n        //队列长度 时间复杂度O(1)\n        System.out.println(queue.size());\n        \n        //遍历队列 时间复杂度O(n)\n        while (!queue.isEmpty()){\n            int temp = queue.poll();\n            System.out.println(temp);\n        }\n```\n\n\n\n\n\n## 3.Leetcode练习题\n\n933 最近的请求次数\n\n```java\nclass RecentCounter {\n\n    private Queue<Integer> pingQueue;\n    private static final int span = 3000;\n\n    public RecentCounter() {\n        // 双端队列\n        pingQueue = new LinkedList();\n    }\n\n    public int ping(int t) {\n        // 队尾插入\n        pingQueue.add(t);\n        // 从队头遍历\n        while (pingQueue.peek() < t - span) {\n            // 将所有在时间t-3000之前的ping移出队列\n            pingQueue.poll();\n        }\n        // 只考虑最近3000到现在的ping数\n        return pingQueue.size();\n    }\n}\n\n```\n\n239 滑动窗口最大值\n\n```java\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if(nums == null || nums.length < 2) return nums;\n        // 双向队列 保存当前窗口最大值的数组位置 保证队列中数组位置的数值按从大到小排序\n        LinkedList<Integer> queue = new LinkedList();\n        // 结果数组\n        int[] result = new int[nums.length-k+1];\n        // 遍历nums数组\n        for(int i = 0;i < nums.length;i++){\n            // 保证从大到小 如果前面数小则需要依次弹出，直至满足要求\n            while(!queue.isEmpty() && nums[queue.peekLast()] <= nums[i]){\n                queue.pollLast();\n            }\n            // 添加当前值对应的数组下标\n            queue.addLast(i);\n            // 判断当前队列中队首的值是否有效\n            if(queue.peek() <= i-k){\n                queue.poll();   \n            } \n            // 当窗口长度为k时 保存当前窗口中最大值\n            if(i+1 >= k){\n                result[i+1-k] = nums[queue.peek()];\n            }\n        }\n        return result;\n    }\n}\n\n\n```\n\n', '<h2><a id=\"1_1\"></a>1.简介</h2>\n<p>排队——先进先出</p>\n<p>单端队列—— 只有一个口可以进，一个口可以出</p>\n<p>双端队列——  两个都可以进，两个口都可以出</p>\n<p>左进右出 右进左出</p>\n<hr />\n<p>时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th>访问</th>\n<th><strong>O(N)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>搜索</strong></td>\n<td><strong>O(n)</strong></td>\n</tr>\n<tr>\n<td><strong>插入</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td><strong>O(1)</strong></td>\n</tr>\n</tbody>\n</table>\n<p>访问搜索都要从头到尾找</p>\n<h2><a id=\"2JAVA_27\"></a>2.JAVA队列基本操作</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\">        <span class=\"hljs-comment\">//创建队列 使用数组构建 添加删除时间复杂度容易变成O(n)</span>\n        Queue&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();\n\n        <span class=\"hljs-comment\">//添加元素 时间复杂度O(1)</span>\n        queue.add(<span class=\"hljs-number\">1</span>);\n        queue.add(<span class=\"hljs-number\">2</span>);\n        queue.add(<span class=\"hljs-number\">3</span>);\n        System.out.println(queue.toString());\n\n        <span class=\"hljs-comment\">//获取元素 获取即将出队的元素 时间复杂度O(1)</span>\n        <span class=\"hljs-keyword\">int</span> temp1 = queue.peek();\n        System.out.println(temp1);\n        \n        <span class=\"hljs-comment\">//删除元素 删除即将出队的元素 时间复杂度O(1)</span>\n        <span class=\"hljs-keyword\">int</span> temp2 = queue.poll();\n        System.out.println(temp2);\n        System.out.println(queue.toString());\n        \n        <span class=\"hljs-comment\">//判断队列是否为空 时间复杂度O(1)</span>\n        System.out.println(queue.isEmpty());\n        \n        <span class=\"hljs-comment\">//队列长度 时间复杂度O(1)</span>\n        System.out.println(queue.size());\n        \n        <span class=\"hljs-comment\">//遍历队列 时间复杂度O(n)</span>\n        <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()){\n            <span class=\"hljs-keyword\">int</span> temp = queue.poll();\n            System.out.println(temp);\n        }\n</code></div></pre>\n<h2><a id=\"3Leetcode_65\"></a>3.Leetcode练习题</h2>\n<p>933 最近的请求次数</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RecentCounter</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Queue&lt;Integer&gt; pingQueue;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> span = <span class=\"hljs-number\">3000</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">RecentCounter</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 双端队列</span>\n        pingQueue = <span class=\"hljs-keyword\">new</span> LinkedList();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">ping</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> t)</span> </span>{\n        <span class=\"hljs-comment\">// 队尾插入</span>\n        pingQueue.add(t);\n        <span class=\"hljs-comment\">// 从队头遍历</span>\n        <span class=\"hljs-keyword\">while</span> (pingQueue.peek() &lt; t - span) {\n            <span class=\"hljs-comment\">// 将所有在时间t-3000之前的ping移出队列</span>\n            pingQueue.poll();\n        }\n        <span class=\"hljs-comment\">// 只考虑最近3000到现在的ping数</span>\n        <span class=\"hljs-keyword\">return</span> pingQueue.size();\n    }\n}\n\n</code></div></pre>\n<p>239 滑动窗口最大值</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] maxSlidingWindow(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> k) {\n        <span class=\"hljs-keyword\">if</span>(nums == <span class=\"hljs-keyword\">null</span> || nums.length &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> nums;\n        <span class=\"hljs-comment\">// 双向队列 保存当前窗口最大值的数组位置 保证队列中数组位置的数值按从大到小排序</span>\n        LinkedList&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList();\n        <span class=\"hljs-comment\">// 结果数组</span>\n        <span class=\"hljs-keyword\">int</span>[] result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[nums.length-k+<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-comment\">// 遍历nums数组</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; nums.length;i++){\n            <span class=\"hljs-comment\">// 保证从大到小 如果前面数小则需要依次弹出，直至满足要求</span>\n            <span class=\"hljs-keyword\">while</span>(!queue.isEmpty() &amp;&amp; nums[queue.peekLast()] &lt;= nums[i]){\n                queue.pollLast();\n            }\n            <span class=\"hljs-comment\">// 添加当前值对应的数组下标</span>\n            queue.addLast(i);\n            <span class=\"hljs-comment\">// 判断当前队列中队首的值是否有效</span>\n            <span class=\"hljs-keyword\">if</span>(queue.peek() &lt;= i-k){\n                queue.poll();   \n            } \n            <span class=\"hljs-comment\">// 当窗口长度为k时 保存当前窗口中最大值</span>\n            <span class=\"hljs-keyword\">if</span>(i+<span class=\"hljs-number\">1</span> &gt;= k){\n                result[i+<span class=\"hljs-number\">1</span>-k] = nums[queue.peek()];\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n}\n\n\n</code></div></pre>\n', '6');
INSERT INTO `ms_article_body` VALUES ('1512382669214683141', '历时十天，2022年4月8日，完成博客基本开发，后续将优化界面，增加功能。', '<p>历时十天，2022年4月8日，完成博客基本开发，后续将优化界面，增加功能。</p>\n', '1');
INSERT INTO `ms_article_body` VALUES ('1512407854470885380', 'test', '<p>test</p>\n', '1512407854470885378');

-- ----------------------------
-- Table structure for ms_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `ms_article_tag`;
CREATE TABLE `ms_article_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `article_id` bigint(20) NOT NULL,
  `tag_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `article_id` (`article_id`) USING BTREE,
  KEY `tag_id` (`tag_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1612382214845730820 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_article_tag
-- ----------------------------
INSERT INTO `ms_article_tag` VALUES ('1512376562991742978', '5', '8');
INSERT INTO `ms_article_tag` VALUES ('1512378940574851075', '4', '8');
INSERT INTO `ms_article_tag` VALUES ('1512381073319759875', '3', '8');
INSERT INTO `ms_article_tag` VALUES ('1512381289016037379', '6', '8');
INSERT INTO `ms_article_tag` VALUES ('1512382214845730818', '3', '2');
INSERT INTO `ms_article_tag` VALUES ('1512382214845730819', '2', '8');
INSERT INTO `ms_article_tag` VALUES ('1512382214845730820', '2', '2');
INSERT INTO `ms_article_tag` VALUES ('1512382214845730855', '4', '2');
INSERT INTO `ms_article_tag` VALUES ('1512382669214683139', '1', '4');
INSERT INTO `ms_article_tag` VALUES ('1512382669214683140', '1', '3');
INSERT INTO `ms_article_tag` VALUES ('1512407854470885379', '1512407854470885378', '4');
INSERT INTO `ms_article_tag` VALUES ('1612382214845730818', '6', '2');
INSERT INTO `ms_article_tag` VALUES ('1612382214845730819', '5', '2');

-- ----------------------------
-- Table structure for ms_category
-- ----------------------------
DROP TABLE IF EXISTS `ms_category`;
CREATE TABLE `ms_category` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `category_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_category
-- ----------------------------
INSERT INTO `ms_category` VALUES ('1', '/static/category/front.png', '前端', '前端是什么');
INSERT INTO `ms_category` VALUES ('2', '/static/category/back.png', '后端', '后端最牛叉');
INSERT INTO `ms_category` VALUES ('3', '/static/category/lift.jpg', '生活', '生活趣事');
INSERT INTO `ms_category` VALUES ('4', '/static/category/database.png', '数据结构', '基本数据结构记录');

-- ----------------------------
-- Table structure for ms_comment
-- ----------------------------
DROP TABLE IF EXISTS `ms_comment`;
CREATE TABLE `ms_comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_date` bigint(20) NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `author_id` bigint(20) NOT NULL,
  `parent_id` bigint(20) NOT NULL,
  `to_uid` bigint(20) NOT NULL,
  `level` varchar(1) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `article_id` (`article_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1512776926349967362 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_comment
-- ----------------------------
INSERT INTO `ms_comment` VALUES ('1512403368134295554', 's', '1649420036719', '1', '1', '0', '0', '1');
INSERT INTO `ms_comment` VALUES ('1512403724549476353', 'sds', '1649420121691', '1', '1', '0', '0', '1');
INSERT INTO `ms_comment` VALUES ('1512403750025678850', 'sd', '1649420127765', '1', '1', '1512403724549476353', '1', '2');
INSERT INTO `ms_comment` VALUES ('1512404898556108801', '测试一下评论', '1649420401594', '5', '1', '0', '0', '1');
INSERT INTO `ms_comment` VALUES ('1512404974938578945', 'test', '1649420419819', '2', '1', '0', '0', '1');
INSERT INTO `ms_comment` VALUES ('1512404997646540801', 'test2', '1649420425234', '2', '1', '1512404974938578945', '1', '2');
INSERT INTO `ms_comment` VALUES ('1512776861522804737', '但是', '1649509084476', '1512407854470885378', '1', '0', '0', '1');
INSERT INTO `ms_comment` VALUES ('1512776926349967361', '累死了', '1649509099934', '1', '1', '0', '0', '1');

-- ----------------------------
-- Table structure for ms_permission
-- ----------------------------
DROP TABLE IF EXISTS `ms_permission`;
CREATE TABLE `ms_permission` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `path` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_permission
-- ----------------------------
INSERT INTO `ms_permission` VALUES ('1', '查询权限列表', '/admin/permission/permissionList', '查询权限列表');
INSERT INTO `ms_permission` VALUES ('2', '修改权限列表', '/admin/permission/', '修改权限列表');
INSERT INTO `ms_permission` VALUES ('3', '删除权限列表', '/admin/permission/', '删除权限列表');
INSERT INTO `ms_permission` VALUES ('4', '删除权限', '/admin/permission/add', '删除权限');

-- ----------------------------
-- Table structure for ms_sys_log

-- ----------------------------
DROP TABLE IF EXISTS `ms_sys_log`;
CREATE TABLE `ms_sys_log` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_date` bigint(20) DEFAULT NULL,
  `ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `method` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `module` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `nickname` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `operation` varchar(25) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `params` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `time` bigint(20) DEFAULT NULL,
  `userid` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_sys_log
-- ----------------------------

-- ----------------------------
-- Table structure for ms_sys_user
-- ----------------------------
DROP TABLE IF EXISTS `ms_sys_user`;
CREATE TABLE `ms_sys_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `account` varchar(64) DEFAULT NULL COMMENT '账号',
  `admin` bit(1) DEFAULT NULL COMMENT '是否管理员',
  `avatar` varchar(255) DEFAULT NULL COMMENT '头像',
  `create_date` bigint(20) DEFAULT NULL COMMENT '注册时间',
  `deleted` bit(1) DEFAULT NULL COMMENT '是否删除',
  `email` varchar(128) DEFAULT NULL COMMENT '邮箱',
  `last_login` bigint(20) DEFAULT NULL COMMENT '最后登录时间',
  `mobile_phone_number` varchar(20) DEFAULT NULL COMMENT '手机号',
  `nickname` varchar(255) DEFAULT NULL COMMENT '昵称',
  `password` varchar(64) DEFAULT NULL COMMENT '密码',
  `salt` varchar(255) DEFAULT NULL COMMENT '加密盐',
  `status` varchar(255) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1512378108831784963 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_sys_user
-- ----------------------------
INSERT INTO `ms_sys_user` VALUES ('1', 'admin', '', 'http://localhost:8080/static/img/logo.b3a48c0.png', '20210622223122', '\0', '11', '20210630223130', '12', '小明', 'd40c153ee5285cfac48256535ce213b8', '12', '1');
INSERT INTO `ms_sys_user` VALUES ('1512378108831784962', 'test', '', '/static/img/logo.b3a48c0.png', '1649414014426', '\0', '', '1649414014426', null, 'test', 'dc1a490816067f6b14824d7c51b7b61a', '', '');

-- ----------------------------
-- Table structure for ms_tag
-- ----------------------------
DROP TABLE IF EXISTS `ms_tag`;
CREATE TABLE `ms_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of ms_tag
-- ----------------------------
INSERT INTO `ms_tag` VALUES ('1', '/static/tag/css.png', 'C/C++');
INSERT INTO `ms_tag` VALUES ('2', '/static/tag/css.png', 'Java');
INSERT INTO `ms_tag` VALUES ('3', '/static/tag/css.png', '杂想');
INSERT INTO `ms_tag` VALUES ('4', '/static/tag/css.png', '开发日记');
INSERT INTO `ms_tag` VALUES ('5', '/static/tag/java.png', 'springboot');
INSERT INTO `ms_tag` VALUES ('6', '/static/tag/java.png', 'spring');
INSERT INTO `ms_tag` VALUES ('7', '/static/tag/java.png', 'springmvc');
INSERT INTO `ms_tag` VALUES ('8', '/static/tag/css.png', '数据结构与算法');

INSERT INTO `ms_tag` VALUES ('9', '/static/tag/css.png', 'Linux');

INSERT INTO `ms_tag` VALUES ('10', '/static/tag/css.png', 'bug集合');
